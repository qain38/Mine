//Error
using System;
using System.Collections.Generic;

// 1. IBankAccount Interface
public interface IBankAccount
{
    void Deposit(double amount);
    void Withdraw(double amount);
}

// 2. BankAccount Class
public abstract class BankAccount : IBankAccount
{
    protected string accountNumber;
    protected string accountHolderName;
    protected double balance;

    public BankAccount(string accountNumber, string accountHolderName, double balance)
    {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
    }

    public abstract void DisplayAccountInfo();

    public void Deposit(double amount)
    {
        balance += amount;
        Console.WriteLine($"Deposited {amount:C}. New balance: {balance:C}");
    }

    public void Withdraw(double amount)
    {
        if (amount <= balance)
        {
            balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance.");
        }
    }
}

// 3. SavingsAccount Class
public class SavingsAccount : BankAccount
{
    private double interestRate;

    public SavingsAccount(string accountNumber, string accountHolderName, double balance, double interestRate)
        : base(accountNumber, accountHolderName, balance)
    {
        this.interestRate = interestRate;
    }

    public override void DisplayAccountInfo()
    {
        Console.WriteLine($"Account Number: {accountNumber}");
        Console.WriteLine($"Account Holder: {accountHolderName}");
        Console.WriteLine($"Balance: {balance:C}");
        Console.WriteLine($"Interest Rate: {interestRate:P}");
    }

    public override void Deposit(double amount)
    {
        balance += amount;
        double interestAmount = balance * interestRate;
        balance += interestAmount;
        Console.WriteLine($"Deposited {amount:C} with interest. New balance: {balance:C}");
    }
}

// 4. CheckingAccount Class
public class CheckingAccount : BankAccount
{
    public CheckingAccount(string accountNumber, string accountHolderName, double balance)
        : base(accountNumber, accountHolderName, balance)
    {
    }

    public override void DisplayAccountInfo()
    {
        Console.WriteLine($"Account Number: {accountNumber}");
        Console.WriteLine($"Account Holder: {accountHolderName}");
        Console.WriteLine($"Balance: {balance:C}");
    }

    public override void Withdraw(double amount)
    {
        if (amount <= balance)
        {
            balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance.");
        }
    }
}

// 5. Bank Class
public class Bank
{
    private List<BankAccount> bankAccounts;

    public Bank()
    {
        bankAccounts = new List<BankAccount>();
    }

    public void AddAccount(BankAccount bankAccount)
    {
        bankAccounts.Add(bankAccount);
        Console.WriteLine("Bank account added.");
    }

    public void DepositToAccount(string accountNumber, double amount)
    {
        BankAccount account = bankAccounts.Find(a => a.accountNumber == accountNumber);
        if (account != null)
        {
            account.Deposit(amount);
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }

    public void WithdrawFromAccount(string accountNumber, double amount)
    {
        BankAccount account = bankAccounts.Find(a => a.accountNumber == accountNumber);
        if (account != null)
        {
            account.Withdraw(amount);
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }
}

// 6. Main Program
class Program
{
    static void Main(string[] args)
    {
        Bank bank = new Bank();

        SavingsAccount savingsAccount = new SavingsAccount("SA001", "John Doe", 5000, 0.05);
        CheckingAccount checkingAccount = new CheckingAccount("CA001", "Jane Smith", 3000);

        bank.AddAccount(savingsAccount);
        bank.AddAccount(checkingAccount);

        bank.DepositToAccount("SA001", 1000);
        bank.WithdrawFromAccount("CA001", 500);
        bank.WithdrawFromAccount("SA001", 7000);

        Console.WriteLine();
        savingsAccount.DisplayAccountInfo();
        Console.WriteLine();
        checkingAccount.DisplayAccountInfo();

        Console.ReadKey();
    }
}







//no error
using System;
using System.Collections.Generic;

// 1. IBankAccount Interface
public interface IBankAccount
{
    void Deposit(double amount);
    void Withdraw(double amount);
}

// 2. BankAccount Class
public abstract class BankAccount : IBankAccount
{
    public  string accountNumber;
    protected string accountHolderName;
    protected double balance;

    public BankAccount(string accountNumber, string accountHolderName, double balance)
    {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
    }

    public abstract void DisplayAccountInfo();

    public void Deposit(double amount)
    {
        balance += amount;
        Console.WriteLine($"Deposited {amount:C}. New balance: {balance:C}");
    }

    public void Withdraw(double amount)
    {
        if (amount <= balance)
        {
            balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance.");
        }
    }
}

// 3. SavingsAccount Class
public class SavingsAccount : BankAccount
{
    private double interestRate;

    public SavingsAccount(string accountNumber, string accountHolderName, double balance, double interestRate)
        : base(accountNumber, accountHolderName, balance)
    {
        this.interestRate = interestRate;
    }

    public override void DisplayAccountInfo()
    {
        Console.WriteLine($"Account Number: {accountNumber}");
        Console.WriteLine($"Account Holder: {accountHolderName}");
        Console.WriteLine($"Balance: {balance:C}");
        Console.WriteLine($"Interest Rate: {interestRate:P}");
    }

    public  void Deposit(double amount)
    {
        balance += amount;
        double interestAmount = balance * interestRate;
        balance += interestAmount;
        Console.WriteLine($"Deposited {amount:C} with interest. New balance: {balance:C}");
    }
}

// 4. CheckingAccount Class
public class CheckingAccount : BankAccount
{
    public CheckingAccount(string accountNumber, string accountHolderName, double balance)
        : base(accountNumber, accountHolderName, balance)
    {
    }

    public override void DisplayAccountInfo()
    {
        Console.WriteLine($"Account Number: {accountNumber}");
        Console.WriteLine($"Account Holder: {accountHolderName}");
        Console.WriteLine($"Balance: {balance:C}");
    }

    public  void Withdraw(double amount)
    {
        if (amount <= balance)
        {
            balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance.");
        }
    }
}

// 5. Bank Class
public class Bank
{
    private List<BankAccount> bankAccounts;

    public Bank()
    {
        bankAccounts = new List<BankAccount>();
    }

    public void AddAccount(BankAccount bankAccount)
    {
        bankAccounts.Add(bankAccount);
        Console.WriteLine("Bank account added.");
    }

    public void DepositToAccount(string accountNumber, double amount)
    {
        BankAccount account = bankAccounts.Find(a => a.accountNumber == accountNumber);
        if (account != null)
        {
            account.Deposit(amount);
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }

    public void WithdrawFromAccount(string accountNumber, double amount)
    {
        BankAccount account = bankAccounts.Find(a => a.accountNumber == accountNumber);
        if (account != null)
        {
            account.Withdraw(amount);
        }
        else
        {
            Console.WriteLine("Account not found.");
        }
    }
}

// 6. Main Program
class Program
{
    static void Main(string[] args)
    {
        Bank bank = new Bank();

        SavingsAccount savingsAccount = new SavingsAccount("SA001", "John Doe", 5000, 0.05);
        CheckingAccount checkingAccount = new CheckingAccount("CA001", "Jane Smith", 3000);

        bank.AddAccount(savingsAccount);
        bank.AddAccount(checkingAccount);

        bank.DepositToAccount("SA001", 1000);
        bank.WithdrawFromAccount("CA001", 500);
        bank.WithdrawFromAccount("SA001", 7000);

        Console.WriteLine();
        savingsAccount.DisplayAccountInfo();
        Console.WriteLine();
        checkingAccount.DisplayAccountInfo();

        Console.ReadKey();
    }
}
